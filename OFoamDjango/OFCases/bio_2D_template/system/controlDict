/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "../setUp"

application     hybridPorousInterFoam; 

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         $stopTime; //300;

deltaT          5e-3;

writeControl    adjustableRunTime; 

writeInterval   $writeResults;

purgeWrite      5;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           $maxCo;
maxAlphaCo      $maxAlphaCo;
maxDeltaT       $maxDeltaT;

functions
{
  // #includeFunc "cuttingPlane"
  
  planes
    {
        type 			surfaces;
        libs            ("libsampling.so");
        functionObjectLibs ("libsampling.so");
   	//writeControl	timeStep;
	writeControl    adjustableRunTime; 
	writeInterval   $DataWriteInterval;
        surfaceFormat 	vtk;
        interpolationScheme cellPoint;
        fields
        (
            alpha.wetting
            U
          //  p 
          //  Uwetting
          //  UnonWetting
        );
        surfaces
        (

      xy
        {
            type            cuttingPlane;
            planeType       pointAndNormal;
            interpolate     true;
            store           true;
            pointAndNormalDict
            {
                point   (0 0 0);
                normal  (0 0 1);
            }
        }

        );
    }
 
 
  systemCall1
    {
        type        systemCall;
        libs        ("libutilityFunctionObjects.so");
        writeControl    adjustableRunTime; 
  	    writeInterval   $DataWriteInterval;
        executeCalls 0( );
        writeCalls ("python3 vtk_to_png2.py " );
        endCalls ( "python3 vtk_to_png2.py " "convert -delay 30 -loop 0 $(ls -v alpha_*.png) gif_animation.gif");
 //      outputControl outputTime;   
    }
 
     inlet_flow
    	{
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");
        enabled         yes;
      //  writeControl    timeStep;
        writeControl    adjustableRunTime; 
	      writeInterval   $graphWriteInterval;
        log             no;
        writeFields     no;
        regionType      patch;
        name            water_inlet;
        operation       sum;
        weightField     phi;
        //surfaceFormat 	raw;
        fields
        (
           phi
           alphaPhi
        );
    	}
    	
    
      lower_out
    	{
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");
        enabled         yes;
      //  writeControl    timeStep;
        writeControl    adjustableRunTime; 
	      writeInterval   $graphWriteInterval;
        log             no;
        writeFields     no;
        regionType      patch;
        name            water_out_down;
        operation       sum;
        weightField     phi;
        //surfaceFormat 	raw;
        fields
        (
           phi
           alphaPhi
        );
    	}
    
    big_out
    	{
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");
        enabled         yes;
      //  writeControl    timeStep;
        writeControl    adjustableRunTime; 
	      writeInterval   $graphWriteInterval;
        log             no;
        writeFields     no;
        regionType      patch;
        name            air_out;
        operation       sum;
        weightField     phi;
        //surfaceFormat 	raw;
        fields
        (
           phi
           alphaPhi
        );
    	}
    	
     waterVolume
    	{
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");
           // writeControl    timeStep;
        writeControl    adjustableRunTime; 
	      writeInterval   $graphWriteInterval;
        log             false;
        writeFields     false;
        regionType          all;
        //name                all;
        operation       volIntegrate;
        fields
        (
            alpha.wetting
        );
    }

    systemCall2
    {
        type        systemCall;
        libs        ("libutilityFunctionObjects.so");
        writeControl    adjustableRunTime; 
  	    writeInterval   $DataWriteInterval;
        executeCalls 0( );
        writeCalls ("python3 graphs_to_png.py" );
        endCalls ("python3 graphs_to_png.py");
 //      outputControl outputTime;   
    }    	
}




// ************************************************************************* //
